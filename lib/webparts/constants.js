import * as React from 'react';
import { MaterialConfig } from '@react-awesome-query-builder/material';
import { TextField } from '@material-ui/core';
const InitialConfig = MaterialConfig;
const CustomTextWidget = (props) => {
    const handleChange = (e) => {
        let value = e.target.value;
        value = value.toUpperCase();
        props.setValue(value);
    };
    return React.createElement(TextField, Object.assign({}, props, { onChange: handleChange }));
};
export const FILTER_CONFIG_DEFAULT = Object.assign(Object.assign({}, InitialConfig), { settings: Object.assign(Object.assign({}, InitialConfig.settings), { showNot: false, addRuleLabel: 'Adicionar Regra', addSubRuleLabel: 'Adicionar Regra', addGroupLabel: 'Adicionar Grupo', fieldLabel: 'Campo', notLabel: 'Não', fieldPlaceholder: 'Selecione um valor', valueLabel: 'Valor', valuePlaceholder: 'Valor', operatorLabel: 'Operador', funcLabel: 'Função', funcPlaceholder: 'Selecione uma Função', operatorPlaceholder: 'Selecione um operador', lockLabel: 'Bloqueie', lockedLabel: 'Bloqueado', deleteLabel: 'Excluir', addCaseLabel: 'Adicionar Condição', addDefaultCaseLabel: 'Adicionar Condição Padrão', defaultCaseLabel: 'Padrão:', delGroupLabel: 'Excluir', fieldSourcesPopupTitle: 'Selecione a fonte', valueSourcesPopupTitle: 'Selecione valor da fonte' }), operators: Object.assign(Object.assign({}, InitialConfig.operators), { like: Object.assign(Object.assign({}, InitialConfig.operators.like), { label: 'Contém' }), not_like: Object.assign(Object.assign({}, InitialConfig.operators.not_like), { label: 'Não contém' }), starts_with: Object.assign(Object.assign({}, InitialConfig.operators.starts_with), { label: 'Inicia com' }), ends_with: Object.assign(Object.assign({}, InitialConfig.operators.ends_with), { label: 'Finaliza com' }), between: Object.assign(Object.assign({}, InitialConfig.operators.between), { label: 'Entre', valueLabels: ['De', 'Para'], textSeparators: [null, 'e'] }), not_between: Object.assign(Object.assign({}, InitialConfig.operators.not_between), { label: 'Não entre', valueLabels: ['De', 'Para'], textSeparators: [null, 'e'] }), is_empty: Object.assign(Object.assign({}, InitialConfig.operators.is_empty), { label: 'Vazio' }), is_not_empty: Object.assign(Object.assign({}, InitialConfig.operators.is_not_empty), { label: 'Não vazio' }), is_null: Object.assign(Object.assign({}, InitialConfig.operators.is_null), { label: 'Nulo' }), is_not_null: Object.assign(Object.assign({}, InitialConfig.operators.is_not_null), { label: 'Não nulo' }), select_any_in: Object.assign(Object.assign({}, InitialConfig.operators.select_any_in), { label: 'Qualquer em' }), select_not_any_in: Object.assign(Object.assign({}, InitialConfig.operators.select_not_any_in), { label: 'Não qualquer em' }), multiselect_contains: Object.assign(Object.assign({}, InitialConfig.operators.multiselect_contains), { label: 'Contém' }), multiselect_not_contains: Object.assign(Object.assign({}, InitialConfig.operators.multiselect_not_contains), { label: 'Não contém' }), multiselect_equals: Object.assign(Object.assign({}, InitialConfig.operators.multiselect_equals), { label: 'Igual' }), multiselect_not_equals: Object.assign(Object.assign({}, InitialConfig.operators.multiselect_not_equals), { label: 'Não igual' }), proximity: Object.assign(Object.assign({}, InitialConfig.operators.proximity), { label: 'Proximidade busca' }) }), widgets: Object.assign(Object.assign({}, InitialConfig.widgets), { text: Object.assign(Object.assign({}, InitialConfig.widgets.text), { factory: (props) => React.createElement(CustomTextWidget, Object.assign({}, props)), labelNo: 'Não', labelYes: 'Sim', valueLabel: 'Valor', valuePlaceholder: 'Digite um valor' }), textarea: Object.assign(Object.assign({}, InitialConfig.widgets.textarea), { labelNo: 'Não', labelYes: 'Sim', valueLabel: 'Valor', valuePlaceholder: 'Digite um texto' }), number: Object.assign(Object.assign({}, InitialConfig.widgets.number), { labelNo: 'Não', labelYes: 'Sim', valueLabel: 'Valor', valuePlaceholder: 'Digite um número' }), select: Object.assign(Object.assign({}, InitialConfig.widgets.select), { labelNo: 'Não', labelYes: 'Sim', valueLabel: 'Valor', valuePlaceholder: 'Selecione um valor' }), multiselect: Object.assign(Object.assign({}, InitialConfig.widgets.multiselect), { labelNo: 'Não', labelYes: 'Sim', valueLabel: 'Valor', valuePlaceholder: 'Selecione um valor' }), date: Object.assign(Object.assign({}, InitialConfig.widgets.date), { labelNo: 'Não', labelYes: 'Sim', valueLabel: 'Valor', dateFormat: 'DD/MM/YYYY', 
            // valueFormat: 'DD/MM/YYYY',
            valuePlaceholder: 'Selecione uma data', valueLabels: [
                { label: 'De', placeholder: 'De' },
                { label: 'Até', placeholder: 'Até' },
            ] }), time: Object.assign(Object.assign({}, InitialConfig.widgets.time), { labelNo: 'Não', labelYes: 'Sim', valueLabel: 'Valor', valuePlaceholder: 'Selecione um valor', valueLabels: [
                { label: 'De', placeholder: 'De' },
                { label: 'Até', placeholder: 'Até' },
            ] }), datetime: Object.assign(Object.assign({}, InitialConfig.widgets.datetime), { labelNo: 'Não', labelYes: 'Sim', valueLabel: 'Valor', dateFormat: 'DD/MM/YYYY', timeFormat: 'HH:mm', valuePlaceholder: 'Selecione um valor', valueLabels: [
                { label: 'De', placeholder: 'De' },
                { label: 'Até', placeholder: 'Até' },
            ] }), boolean: Object.assign(Object.assign({}, InitialConfig.widgets.boolean), { labelNo: 'Não', labelYes: 'Sim', valueLabel: 'Valor' }) }), conjunctions: Object.assign(Object.assign({}, InitialConfig.conjunctions), { AND: Object.assign(Object.assign({}, InitialConfig.conjunctions.AND), { label: 'E' }), OR: Object.assign(Object.assign({}, InitialConfig.conjunctions.OR), { label: 'Ou' }) }) });
export const FILTER_CONFIG_ADVANCED_SEARCH_DEFAULT = Object.assign(Object.assign({}, FILTER_CONFIG_DEFAULT), { widgets: Object.assign(Object.assign({}, FILTER_CONFIG_DEFAULT.widgets), { text: Object.assign(Object.assign({}, InitialConfig.widgets.text), { labelNo: 'Não', labelYes: 'Sim', valueLabel: 'Valor', valuePlaceholder: 'Digite um valor' }) }) });
//# sourceMappingURL=constants.js.map